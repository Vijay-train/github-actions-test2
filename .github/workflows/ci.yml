name: CI
on:
  pull_request: # on PR in develop and master branch
    branches: [develop11, main11]

  push: # on push in develop and master branch
    branches: [develop11, main11]

# 0) Checkout code locally
# 1) Install dependencies
# 2) Check code formatting with prettier
# 3) Run Automated tests
# 4) Upload code coverage as Artifact
# 5) Cache dependencies
# ## only for Push
# 6) Build
# 7) Deploy to staging

jobs:
  # Job demonstrates various other intersting learnings from action
  docker-job-sample:
    runs-on: ubuntu-latest
    container: node:13.5.0-alpine3.10

    steps:
      - name: step in container
        run: |
          node -v

      - name: Contains Functions
        run: |
          echo "Is string llo in Helllo world? - ${{ Contains('Hello world','llo')}} "

      - name: Dump GitHub context
        id: github_context_step
        run: echo '${{ toJSON(github) }}'

      - name: Dump job context
        run: echo '${{ toJSON(job) }}'

      - name: Dump steps context
        run: echo '${{ toJSON(steps) }}'

      - name: Dump runner context
        run: echo '${{ toJSON(runner) }}'

      - name: Dump strategy context
        run: echo '${{ toJSON(strategy) }}'

      - name: Dump matrix context
        run: echo '${{ toJSON(matrix) }}'

  build:
    runs-on: ubuntu-latest
    env: # surge needs creds to authenticate, we will put those as secrets and access it here.
      SURGE_LOGIN: ${{ secrets.SURGE_LOGIN}} # Pattern : usage of secrets
      SURGE_TOKEN: ${{ secrets.SURGE_TOKEN}}

    steps:
      # Step : run some log output
      - name: Debug log
        run: |
          echo ${{ github.event_name }}
          echo ${{ github.ref }}

      # Step : Get code downloaded
      - uses: actions/checkout@v2

      # Step : Cache any modules using built in action.
      - name: Cache modules
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json')}}

      # Step : Setup node
      - name: use NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"

      # Step : Install node
      - run: npm ci

      # Step :  Run the npm script that we have defined in the package.json.
      #         This one, just checks the format using Pretier
      - run: npm run format:check

      # Step : Run test, this is defined as a scrit in Package.json
      - run: npm test -- --coverage
        env: # Pattern : to use environmental variables
          CI: true

      # Step : upload Test coverage
      # Pattern : How to upload artifacts to WF run
      - name: upload Test coverage
        uses: actions/upload-artifact@v1
        with:
          name: code-coverage
          path: coverage

      # build and deploy only on push to develop
      - name: Build project
        if: github.event_name == 'push' # note the if condition only only on push
        run: npm run build

      # Step : upload Build
      # Pattern : How to upload artifacts to WF run
      - name: upload Build
        if: github.event_name == 'push' # note the if condition only only on push
        uses: actions/upload-artifact@v1
        with:
          name: build
          path: build

      # Step : Deploy to staging (only if the push in [develop] branch)
      - name: Deploy to staging
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        run: npx surge --project ./build --domain tough-basketball.surge.sh #this will instal and use surge

      # Step : Deploy to prod (only if the push in [main] branch)
      - name: Deploy to main
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: npx surge --project ./build --domain elfin-fairies.surge.sh #this will instal and use surge

